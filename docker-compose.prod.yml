version: '3.7'

services:
  cert:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  database:
    hostname: database
    image: bitnami/postgresql:13
    env_file:
      - .env
    volumes:
      - database:/bitnami/postgresql

  redis:
    hostname: redis
    image: bitnami/redis:latest
    command: >
      /opt/bitnami/scripts/redis/run.sh
      --appendonly no
    env_file:
      - .env
    volumes:
      - redis:/bitnami/redis

  celery-worker:
    hostname: celery-worker
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
      target: celery
    env_file:
      - .env
    command: >
      /bin/bash -c "celery -A 
      core worker --loglevel 
      ${CELERY_WORKER_LOGLEVEL}"
    depends_on:
      - database
      - redis
    volumes:
      - ./src:/app/

  guide:
    container_name: guide
    hostname: guide
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
      target: api
    env_file:
      - .env
    environment:
      - SERVICE_VARIANT=api
      - WSGI_NAME=wsgi
    depends_on:
      - database
      - redis
    ports:
      - "8000:8000"
    volumes:
      - ./src/:/app/
      - staticfiles:/app/static
      - mediafiles:/app/media

  flower:
    hostname: flower
    image: mher/flower
    env_file:
      - .env
    environment:
      CELERY_WORKER_LOGLEVEL: INFO
    command: >
      celery --broker=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:6379/0 
      flower --port=5555 --loglevel 
      ${CELERY_WORKER_LOGLEVEL} --url-prefix=flower
    ports:
      - "5555:5555"
    depends_on:
      - database
      - guide
      - redis
      - celery-worker

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.1.0
    env_file:
      - .env
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  grafana:
    container_name: grafana
    image: grafana/grafana:6.5.2
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_ENABLE_GZIP=true
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=localhost:80
      - GF_SERVER_ROOT_URL=http://localhost:80/monitoring
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    env_file:
      - .env
    volumes:
      - ./monitoring/provisioning:/etc/grafana/provisioning
      - ./monitoring/provisioning/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/provisioning/datasources:/var/lib/grafana/datasources

  nginx-exporter:
    hostname: nginx-exporter
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter
    environment:
      - SCRAPE_URI=http://nginx:8888/nginx_status
    env_file:
      - .env
    depends_on:
      - nginx

  nginx:
    container_name: nginx
    hostname: nginx
    build:
      context: ./docker/nginx/
      dockerfile: Dockerfile
      target: prod
    command: >
      /bin/bash -c 
      "envsubst '$$PRODUCTION_HOST' 
      < /etc/nginx/nginx.template 
      > /etc/nginx/conf.d/default.conf 
      && /bin/sh -c 'while :; 
      do sleep 6h & wait $${!}; 
      nginx -s reload; 
      done & nginx -g \"daemon off;\"'"
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/etc/letsencrypt:ro
      - ./docker/nginx/nginx.template:/etc/nginx/nginx.template
      - staticfiles:/app/static
      - mediafiles:/app/media


volumes:
  letsencrypt:
    external:
      name: letsencrypt_keys
  staticfiles:
  mediafiles:
  database:
  redis: